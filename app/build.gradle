apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def config = rootProject.ext.android
def url = rootProject.ext.url
def appId = rootProject.ext.appkey
def keystore = rootProject.ext.keystore


android {
    compileSdkVersion config.compileSdkVersion
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName=rootProject.getName()+"_v"+defaultConfig.versionName+"_"+releaseTime()+"_"+variant.productFlavors[0].name+".apk"
        }
    }


    flavorDimensions 'store'
    productFlavors {

        // 线上环境
        pro {
            dimension 'store'
            buildConfigField "String", "BASE_URL", "\"${url.release}\""
            buildConfigField "String", "BUGLY_APP_ID", "\"${appId.bugly_appid}\""
        }

        // 开发阶段
        dev {
            dimension 'store'
            buildConfigField "String", "BASE_URL", "\"${url.debug}\""
            buildConfigField "String", "BUGLY_APP_ID", "\"${appId.bugly_appid}\""
        }

    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNELID: name]
    }


    signingConfigs {
        debug {
            storeFile file('../wan_android_keystore.jks')
            storePassword keystore.storePassword
            keyAlias keystore.keyAlias
            keyPassword keystore.keyPassword
        }
        release {
            storeFile file('../wan_android_keystore.jks')
            storePassword keystore.storePassword
            keyAlias keystore.keyAlias
            keyPassword keystore.keyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            zipAlignEnabled true     //Zipalign优化
            shrinkResources true    // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}



dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':module_common')
    annotationProcessor 'com.github.bumptech.glide:compiler:4.5.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'
    implementation 'com.hyman:flowlayout-lib:1.1.2'
    implementation 'cn.bingoogolapple:bga-banner:2.2.4@aar'
    implementation 'com.tencent.bugly:crashreport:2.6.6'
    implementation 'com.tencent.bugly:nativecrashreport:3.3.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'
}
